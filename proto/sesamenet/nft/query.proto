syntax = "proto3";
package sesamenet.nft;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "sesamenet/nft/params.proto";
import "sesamenet/nft/nft.proto";
// this line is used by starport scaffolding # 1

option go_package = "sesamenet/x/nft/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/sesamenet/nft/params";
  }
  // Queries a list of Supply items.
	rpc Supply(QuerySupplyRequest) returns (QuerySupplyResponse) {
		option (google.api.http).get = "/sesamenet/nft/collections/{denom_id}/supply";
	}

// Queries a list of Owner items.
	rpc Owner(QueryOwnerRequest) returns (QueryOwnerResponse) {
		option (google.api.http).get = "/sesamenet/nft/nfts/{owner}";
	}

// Queries a list of Collection items.
	rpc Collection(QueryCollectionRequest) returns (QueryCollectionResponse) {
		option (google.api.http).get = "/sesamenet/nft/collections/{denom_id}";
	}

// Queries a list of Denom items.
	rpc Denom(QueryDenomRequest) returns (QueryDenomResponse) {
		option (google.api.http).get = "/sesamenet/nft/denoms/{denom_id}";
	}

// Queries a list of DenomByName items.
	rpc DenomByName(QueryDenomByNameRequest) returns (QueryDenomByNameResponse) {
		option (google.api.http).get = "/sesamenet/nft/denoms/{denom_name}";
	}

// Queries a list of Denoms items.
	rpc Denoms(QueryDenomsRequest) returns (QueryDenomsResponse) {
		option (google.api.http).get = "/sesamenet/nft/denoms";
	}

// Queries a list of NFT items.
	rpc NFT(QueryNFTRequest) returns (QueryNFTResponse) {
		option (google.api.http).get = "/sesamenet/nft/nfts/{denom_id}/{token_id}";
	}

// Queries a list of DenomsOfAddress items.
	rpc DenomsOfAddress(QueryDenomsOfAddressRequest) returns (QueryDenomsOfAddressResponse) {
		option (google.api.http).get = "/sesamenet/nft/denoms/{address}";
	}

// Queries a list of DenomsAccessMap items.
	rpc DenomsAccessMap(QueryDenomsAccessMapRequest) returns (QueryDenomsAccessMapResponse) {
		option (google.api.http).get = "/sesamenet/nft/access-map/{denom_id}";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QuerySupplyRequest {
  string denom_id = 1 [(gogoproto.moretags) = "yaml:\"denom_id\""];
  string owner = 2;
}

message QuerySupplyResponse {
  uint64 amount = 1;
}

message QueryOwnerRequest {
  string denom_id = 1 [(gogoproto.moretags) = "yaml:\"denom_id\""];
  string owner = 2 [(gogoproto.moretags) = "yaml:\"owner\""];

  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

message QueryOwnerResponse {
  Owner owner = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryCollectionRequest {
  string denom_id = 1  [(gogoproto.moretags) = "yaml:\"denom_id\""];
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryCollectionResponse {
  QueryCollection collection = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryDenomRequest {
  string denom_id = 1 [(gogoproto.moretags) = "yaml:\"denom_id\""];
}

message QueryDenomResponse {
  QueryDenom denom = 1;
}

message QueryDenomByNameRequest {
  string denom_name = 1 [(gogoproto.moretags) = "yaml:\"denom_name\""];
}

message QueryDenomByNameResponse {
  QueryDenom denom = 1;
}

message QueryDenomsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryDenomsResponse {
  repeated QueryDenom denoms = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryNFTRequest {
  string denom_id = 1 [(gogoproto.moretags) = "yaml:\"denom_id\""];
  string token_id = 2 [(gogoproto.moretags) = "yaml:\"token_id\""];
}

message QueryNFTResponse {
  BaseNFT nft = 1 [(gogoproto.customname) = "NFT"];
}

message QueryDenomsOfAddressRequest {
  string address = 1;
}

message QueryDenomsOfAddressResponse {
  repeated QueryDenom denoms = 1 [(gogoproto.nullable) = false];
}

message QueryDenomsAccessMapRequest {
  string denom_id = 1 [(gogoproto.moretags) = "yaml:\"denom_id\""];
}

message QueryDenomsAccessMapResponse {
  map<string, bool> access_map = 6;
}

// this line is used by starport scaffolding # 3
