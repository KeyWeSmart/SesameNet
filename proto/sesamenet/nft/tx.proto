syntax = "proto3";
package sesamenet.nft;

// this line is used by starport scaffolding # proto/tx/import
import "gogoproto/gogo.proto";

option go_package = "sesamenet/x/nft/types";

// Msg defines the Msg service.
service Msg {
  rpc IssueDenom(MsgIssueDenom) returns (MsgIssueDenomResponse);
  rpc MintNFT(MsgMintNFT) returns (MsgMintNFTResponse);
  rpc EditNFT(MsgEditNFT) returns (MsgEditNFTResponse);
  rpc TransferNFT(MsgTransferNFT) returns (MsgTransferNFTResponse);
// this line is used by starport scaffolding # proto/tx/rpc
}

message MsgIssueDenom {
  option (gogoproto.equal) = true;

  string id = 1;
  string name = 2;
  string schema = 3;
  string sender = 4;
  string uri = 5;
}

message MsgIssueDenomResponse {
}

message MsgMintNFT {
  option (gogoproto.equal) = true;

  string id = 1;
  string denom_id = 2 [(gogoproto.moretags) = "yaml:\"denom_id\""];
  string name = 3;
  string uri = 4 [(gogoproto.customname) = "URI"];
  string data = 5;
  string sender = 6;
  string recipient = 7;
}

message MsgMintNFTResponse {
}

message MsgEditNFT {
  option (gogoproto.equal) = true;

  string id = 1;
  string denom_id = 2 [(gogoproto.moretags) = "yaml:\"denom_id\""];
  string name = 3;
  string uri = 4 [(gogoproto.customname) = "URI"];
  string data = 5;
  string sender = 6;
}

message MsgEditNFTResponse {
}

message MsgTransferNFT {
  option (gogoproto.equal) = true;

  string id = 1;
  string denom_id = 2 [(gogoproto.moretags) = "yaml:\"denom_id\""];
  string sender = 3;
  string recipient = 4;
}

message MsgTransferNFTResponse {
}

// this line is used by starport scaffolding # proto/tx/message
